# -*- coding: utf-8 -*-
"""questions-pytorch-basics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C43nzg4vYx5J6y8c3L6K_5O-w_NLBYef
"""

# Jovian Commit Essentials
# Please retain and execute this cell without modifying the contents for `jovian.commit` to work
!pip install jovian --upgrade -q
import jovian
jovian.utils.colab.set_colab_file_id('1C43nzg4vYx5J6y8c3L6K_5O-w_NLBYef')

!pip install jovian --upgrade --quiet

"""# Questions for Review

#### 1. What is PyTorch?

PyTorch is an open source machine learning library based on the Torch library, used for applications such as computer vision and natural language processing, primarily developed by Facebook's AI Research lab. It is free and open-source software released under the Modified BSD license. For Reference: https://en.wikipedia.org/wiki/PyTorch

---

In a simple sentence, think about Numpy, but with strong GPU acceleration. Better yet, PyTorch supports dynamic computation graphs that allow you to change how the network behaves on the fly, unlike static graphs that are used in frameworks such as Tensorflow.

#### 2. What is a Jupyter notebook?

The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and explanatory text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, machine learning and much more

#### 3. What is Google Colab?

Colaboratory, or “Colab” for short, is a product from Google Research. Colab allows anybody to write and execute arbitrary python code through the browser, and is especially well suited to machine learning, data analysis and education.

#### 4. How do you install PyTorch?

Talking about Google Colab PyTorch is preinstalled in Google Colab.

---

If you want to install PyTorch on your local machine

Getting started with PyTorch is very easy. The recommended best option is to use the Anaconda Python package manager.

With Anaconda, it's easy to get and manage Python, Jupyter Notebook, and other commonly used packages for scientific computing and data science, like PyTorch!

Let’s go over the steps:

Download and install Anaconda (choose the latest Python version).

1.   Go to PyTorch's site and find the get started locally section.
2.   Specify the appropriate configuration options for your particular environment.
3. Run the presented command in the terminal to install PyTorch.

In this case, we have the following command:

**conda install pytorch torchvision cudatoolkit=10.2 -c pytorch**

Notice that we are installing both PyTorch and torchvision. Also, there is no need to install CUDA separately. The needed CUDA software comes installed with PyTorch if a CUDA version is selected in step (3). All we need to do is select a version of CUDA if we have a supported Nvidia GPU on our system.

**conda list torch**

This will list out the various packages related to PyTorch installed on your system

#### 5. How do you import the torch module?

To import the torch module we simply do

**import torch**

#### 6. What are Scalar, Vector and Matrices?

1.A scalar is a number, like 3, -5, 0.368, etc,

2.A vector is a list of numbers (can be in a row or column),

3.A matrix is an array of numbers (one or more rows, one or more columns).
scalar vector matrix

In fact a vector is also a matrix! Because a matrix can have just one row or one column.
So the rules that work for matrices also work for vectors.

![Diagram](https://www.mathsisfun.com/algebra/images/scalar-vector-matrix.svg)

#### 7. What is a tensor?

When we represent data for machine learning, this generally needs to be done numerically. Especially when referring specifically of neural network data representation, this is accomplished via a data repository known as the tensor. A tensor is a container which can house data in N dimensions. A tensor is a number, vector, matrix, or any n-dimensional array. 

Tensors are merely a generalisation of scalars and vectors; a scalar is a zero rank tensor, and a vector is a first rank tensor.

#### 8. How do you create a PyTorch tensor? Illustrate with examples.

We can simply create a PyTorch tensor by using **torch.tensor(__)**

For example

```
# For creating a single number tensor
t1 = torch.tensor(4.)            
# For creating a 3-dimensional tensor
t2 = torch.tensor([ [[1,2,3], [3,4,5]],
                    [[4,5,6], [7,8,9]] ])
```

#### 9.What does the dtype property of a tensor represent?

The dtype atrribute of a tensor tells us about the data type of a tensor

The output to the code 
```
t1 = torch.tensor(4.)
t1.dtype
```
would be: **torch.float32**

#### 10. Is it possible to create a tensor with elements of different data types?

It is not possible to have a Tensor with more than one data type. It is possible, however, to serialize arbitrary data structures as strings and store those in tensors.

#### 11. How do you inspect the number of dimensions of a tensor and the length along each dimension?

Tensors can have any number of dimensions and different lengths along each dimension. We can inspect the length along each dimension using the .shape property of a tensor.

#### 12. Is it possible to create a tensor with the values [[1, 2, 3], [4, 5]]? Why or why not?

No. It's not possible to create tensors with an improper shape.

#### 13. How do you perform arithmetic operations on tensors? Illustrate with examples?

We can combine tensors with the usual arithmetic operations. Let's look at an example:
```
# Create tensors.
x = torch.tensor(3.)
w = torch.tensor(4., requires_grad=True)
b = torch.tensor(5., requires_grad=True)
x, w, b
```

**(tensor(3.), tensor(4., requires_grad=True), tensor(5., requires_grad=True))**

We've created three tensors: x, w, and b, all numbers. w and b have an additional parameter requires_grad set to True.

Let's create a new tensor y by combining these tensors.
```
# Arithmetic operations
y = w * x + b
y

Output:   tensor(17., grad_fn=<AddBackward0>)
```

#### 14. What happens if you specify requires_grad=True while creating a tensor. What is autograd in PyTorch. How is it useful. What happens when you invoke the backward method of a tensor. How do you check the derivates of a result tensor w.r.t. the tensors used to compute its value?

What makes PyTorch unique is that we can automatically compute the derivative of y w.r.t. the tensors that have requires_grad set to True i.e. w and b. This feature of PyTorch is called autograd (automatic gradients).

To compute the derivatives, we can invoke the .backward method on our result y.
```
#Compute derivatives
y.backward()
```
The derivatives of y with respect to the input tensors are stored in the .grad property of the respective tensors.

```
# Display gradients
print('dy/dx:', x.grad)
print('dy/dw:', w.grad)
print('dy/db:', b.grad)
```
dy/dx: None

dy/dw: tensor(3.)

dy/db: tensor(1.)

As expected, dy/dw has the same value as x, i.e., 3, and dy/db has the value 1. Note that x.grad is None because x doesn't have requires_grad set to True.

The "grad" in w.grad is short for gradient, which is another term for derivative. The term gradient is primarily used while dealing with vectors and matrices.

#### 15. Where can you find the list of tensor operations available in PyTorch?

You can learn more about tensor operations here: https://pytorch.org/docs/stable/torch.html

#### 16. What is Numpy?

Numpy is a popular open-source library used for mathematical and scientific computing in Python. It enables efficient operations on large multi-dimensional arrays and has a vast ecosystem of supporting libraries, including:
1. Pandas for file I/O and data analysis
2. Matplotlib for plotting and visualization
3. OpenCV for image and video processing

#### 17. How do you create a PyTorch tensor using a Numpy array?

```
import numpy as np
x = np.array([[1, 2], [3, 4.]])
x
# Output : array([[1., 2.],[3., 4.]])
```
We can convert a Numpy array to a PyTorch tensor using torch.from_numpy.
```
# Convert the numpy array to a torch tensor.
y = torch.from_numpy(x)
```

#### 18. Why is interoperability between PyTorch and Numpy important?

The interoperability between PyTorch and Numpy is essential because most datasets you'll work with will likely be read and preprocessed as Numpy arrays.

#### 19. What is the purpose of a library like PyTorch if Numpy already provides data structures and utilities to with multi-dimensional numeric data?

You might wonder why we need a library like PyTorch at all since Numpy already provides data structures and utilities for working with multi-dimensional numeric data. There are two main reasons:

Autograd: The ability to automatically compute gradients for tensor operations is essential for training deep learning models.
GPU support: While working with massive datasets and large models, PyTorch tensor operations can be performed efficiently using a Graphics Processing Unit (GPU). Computations that might typically take hours can be completed within minutes using GPUs.

#### 20. What is Jovian.

Jovian.ml is a platform for data scientists to track and reproduce machine learning experiments.

Jovian is a platform for sharing and collaboraring on Jupyter notebooks and data science projects. jovian-py is an open-source Python package for uploading your data science code, Jupyter notebooks, ML models, hyperparameters, metrics etc. to your Jovian account.
"""

!pip install jovian --upgrade --quiet
import jovian
jovian.commit(project='01-pytorch-basics-qa')